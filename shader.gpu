

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 ModelViewMatrix;
uniform mat4 ProjectionMatrix;
uniform mat4 NormalMatrix;
varying vec3 vNormal;
varying vec3 vertPos;
void main() {
    vec4 vertPos4 = ModelViewMatrix * vec4(vertex, 1.0);
    vertPos = vec3(vertPos4) / vertPos4.w;
    vNormal = vec3(NormalMatrix * vec4(normal, 0.0));
    gl_Position = ProjectionMatrix * vertPos4;
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif
varying vec3 vNormal;
varying vec3 vertPos;
uniform vec4 color;
uniform vec3 lightPos;
void main() {
    float shininessVal = 80.0;
    float Ka =1.0;   // Ambient reflection coefficient
    float Kd = 1.0;   // Diffuse reflection coefficient
    float Ks = 1.0;   // Specular reflection coefficient
    // Material color
    // uniform vec3 ambientColor;
    // uniform vec3 diffuseColor;
    // uniform vec3 specularColor;
    vec3 specularColor = vec3(1.0,1.0,1.0);
    vec3 N = normalize(vNormal);
    vec3 L = normalize(lightPos - vertPos);
    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.0;
    if(lambertian > 0.0) {
        vec3 R = reflect(-L, N);      // Reflected light vector
        vec3 V = normalize(-vertPos); // Vector to viewer
        // Compute the specular term
        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, shininessVal);
    }
    // gl_FragColor = color;
    gl_FragColor = vec4(vNormal,1.0);
    //gl_FragColor = vec4(Ka * ambientColor +
    //                  Kd * lambertian * diffuseColor +
    //                  Ks * specular * specularColor, 1.0);
    gl_FragColor = vec4(Ka * 0.1*color.rgb +
                      Kd * lambertian * color.rgb  +
                      Ks * specular * specularColor , 1.0);
}`;