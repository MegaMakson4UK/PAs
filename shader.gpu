

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
attribute vec3 tangent;
attribute vec3 bitangent;
attribute vec2 texture;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 ModelViewMatrix;
uniform mat4 ProjectionMatrix;
uniform mat4 NormalMatrix;
varying vec3 vNormal;
varying vec3 vTangent;
varying vec3 vBitangent;
varying vec3 vertPos;
varying vec2 vTexture;

uniform vec2 pS;
uniform float rotValue;

mat4 translation(vec3 t) {
    mat4 dst;

    dst[0][0] = 1.0;
    dst[0][ 1] = 0.0;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = 0.0;
    dst[1][ 1] = 1.0;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = 1.0;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = t.x;
    dst[3][ 1] = t.y;
    dst[3][ 2] = t.z;
    dst[3][ 3] = 1.0;

    return dst;
}

mat4 rotation(float angleInRadians) {
    mat4 dst;
    float c = cos(angleInRadians);
    float s = sin(angleInRadians);

    dst[0][0] = c;
    dst[0][ 1] = s;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = -s;
    dst[1][ 1] = c;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = 1.0;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = 0.0;
    dst[3][ 1] = 0.0;
    dst[3][ 2] = 0.0;
    dst[3][ 3] = 1.0;

    return dst;
}
uniform bool prioritizeNormal;

void main() {
    vec4 t1 = translation(vec3(-pS,0.0))*vec4(texture,0.0,1.0);
    vec4 t2 = rotation(rotValue)*t1;
    vec4 t3 = translation(vec3(pS,0.0))*t2;
    vTexture = t3.st;

    vec4 vertPos4 = ModelViewMatrix * vec4(vertex, 1.0);
    vertPos = vec3(vertPos4) / vertPos4.w;
    vNormal = vec3(NormalMatrix * vec4(normal, 0.0));
    vTangent = vec3(NormalMatrix * vec4(tangent, 0.0));
    vec3 N = normalize(vNormal);
    vec3 T = normalize(vTangent);
    if (prioritizeNormal) {
        // Adjust Tangent to be orthogonal to Normal
        T = normalize(T - dot(T, N) * N);
    } else {
        // Adjust Normal to be orthogonal to Tangent
        N = normalize(N - dot(N, T) * T);
    }
    vBitangent = vec3(NormalMatrix * vec4(bitangent, 0.0));
    vBitangent = cross(N,T);
    gl_Position = ProjectionMatrix * vertPos4;
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif
varying vec3 vNormal;
varying vec3 vTangent;
varying vec3 vBitangent;
varying vec3 vertPos;
varying vec2 vTexture;
uniform vec4 color;
uniform vec3 lightPos;
uniform sampler2D diffTex;
uniform sampler2D normTex;
uniform sampler2D specTex;
void main() {
    float shininessVal = 80.0;
    float Ka =1.0;   // Ambient reflection coefficient
    float Kd = 1.0;   // Diffuse reflection coefficient
    float Ks = 1.0;   // Specular reflection coefficient
    // Material color
    // uniform vec3 ambientColor;
    // uniform vec3 diffuseColor;
    // uniform vec3 specularColor;
    vec3 specularColor = vec3(1.0,1.0,1.0);
    vec3 T = normalize(vTangent);
    vec3 B = normalize(vBitangent);
    vec3 N = texture2D(normTex,vTexture).xyz;
    //vec3 vN = normalize(vNormal);
    N = N * 2.0 - 1.0;
    mat3 TBN = mat3(T, B, N);
    vec3 worldNormal = normalize(TBN * N);
    vec3 L = normalize(lightPos - vertPos);
    float lambertian = max(dot(worldNormal, L), 0.0);
    float specular = 0.0;
    if(lambertian > 0.0) {
        vec3 R = reflect(-L, worldNormal);      // Reflected light vector
        vec3 V = normalize(-vertPos); // Vector to viewer
        // Compute the specular term
        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, shininessVal);
    }
    // gl_FragColor = color;
    gl_FragColor = vec4(N,1.0);
    //gl_FragColor = vec4(Ka * ambientColor +
    //                  Kd * lambertian * diffuseColor +
    //                  Ks * specular * specularColor, 1.0);
    //gl_FragColor = vec4(Ka * 0.1*color.rgb +
    //                  Kd * lambertian * color.rgb  +
     //                 Ks * specular * specularColor , 1.0);
     vec4 diffCol =vec4(Kd * lambertian*texture2D(diffTex,vTexture).rgb,1.0);
    vec4 specCol =vec4(Ks * specular *texture2D(specTex,vTexture).rgb,1.0);
    gl_FragColor =diffCol+specCol;
    if(color.z==1.0){
        gl_FragColor = color;
    }
    //gl_FragColor = vec4(N,1.0);
}`;